## 0/1 KNAPSACK (DYNAMIC)::::::::::
#include <iostream> 
#include <vector> 
 
using namespace std; 
 
int knapsack(vector<int>& weights, vector<int>& values, int n, int capacity) { 
     
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0)); 
 
    for (int i = 0; i <= n; i++) { 
        for (int w = 0; w <= capacity; w++) { 
            if (i == 0 || w == 0) { 
                dp[i][w] = 0; 
            } else if (weights[i - 1] <= w) { 
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]); 
            } else { 
                dp[i][w] = dp[i - 1][w]; 
            } 
        } 
    } 
 
    return dp[n][capacity]; 
} 
 
int main() { 
    int n = 4; 
    vector<int> weights = {1, 2, 3, 8}; 
    vector<int> values = {20, 5, 10, 40}; 
    int capacity = 10; 
 
    int maxValue = knapsack(weights, values, n, capacity); 
    cout << "Maximum value in 0/1 Knapsack = " << maxValue << endl; 
 
    return 0; 
}
