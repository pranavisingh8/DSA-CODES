              
            Object[] suffix1 = t.toArray();
            String[] suffix = new String[suffix1.length];

            for (int l = 0; l < suffix.length; l++) {
                suffix[l] = (String) suffix1[l];
                // System.out.println(suffix[l]);
            }

            int[] len = new int[suffix.length];
            int[] lcp = new int[suffix.length];

            len[0] = suffix[0].length();
            lcp[0] = 0;

            for (int j = 1; j < suffix.length; j++) {
                int count = 0;
                try {
                    while (true) {
                        if (suffix[j - 1].charAt(count) == suffix[j].charAt(count)) {
                            count++;
                        } else {
                            break;
                        }
                    }
                } catch (StringIndexOutOfBoundsException e) {
                }
                len[j] = suffix[j].length() - count;
                lcp[j] = count;
            }

            int q = Integer.parseInt(br.readLine());
            for (int i = 0; i < q; i++) {
                int a = Integer.parseInt(br.readLine());
                int a1 = 0;
                int j = 0;
                int count = 0;

                try {
                    while (j < a) {
                        a1 = j;
                        j = j + len[count++];
                    }
                    count--;
                    System.out.println(suffix[count].substring(0, lcp[count] + a - a1));
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("INVALID");
                }
            }
        } catch (IOException e) {
            System.out.println(e);
        }
    }
}


POISONOUS PLANT 
import java.util.*;

public class PoisonousPlants {
    public static int poisonousPlants(List<Integer> p) {
        if (p.size() <= 1) return 0;
        
        int count = 0;
        List<ArrayList<Integer>> stackList = new ArrayList<>();
        ArrayList<Integer> parentQueue = new ArrayList<>();
        
        stackList.add(parentQueue);
        ArrayList<Integer> curStack = parentQueue;
        parentQueue.add(p.get(0));

        for (int i = 1; i < p.size(); i++) {
            if (p.get(i) <= p.get(i - 1)) {
                curStack.add(p.get(i));
            } else {
                ArrayList<Integer> stack2 = new ArrayList<>();
                stack2.add(p.get(i));
                curStack = stack2;
                stackList.add(stack2);
            }
        }

        while (stackList.size() > 1) {
            count++;
            for (int i = stackList.size() - 1; i > 0; i--) {
                ArrayList<Integer> list = stackList.get(i);
                list.remove(0);

                if (list.isEmpty()) {
                    stackList.remove(i);
                } else {
                    ArrayList<Integer> prevList = stackList.get(i - 1);
                    if (prevList.get(prevList.size() - 1) >= list.get(0)) {
                        prevList.addAll(list);
                        stackList.remove(i);
                    }
                }
            }
        }

        return count;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int n = scanner.nextInt();
        List<Integer> p = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            p.add(scanner.nextInt());
        }

        System.out.println(poisonousPlants(p));
        scanner.close();
    }
}

TWO STRINGS
import java.util.*;

public class TwoStrings {
    static String twoStrings(String s1, String s2) {
        Set<Character> s1Set = new HashSet<>();
        
        for (char c : s1.toCharArray()) {
            s1Set.add(c);
        }

        for (char c : s2.toCharArray()) {
            if (s1Set.contains(c)) {
                return "YES";
            }
        }

        return "NO";
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        scanner.nextLine();  

        for (int i = 0; i < q; i++) {
            String s1 = scanner.nextLine();
            String s2 = scanner.nextLine();
            System.out.println(twoStrings(s1, s2));
        }
        
        scanner.close();
    }
}

TWO TWO
import java.io.*;
import java.math.BigInteger;

class Trie {
    Trie[] child;
    boolean end;

    Trie() {
        child = new Trie[10];
        end = false;
    }

    void insert(String s) {
        Trie act = this;
        for (int i = 0; i < s.length(); i++) {
            int si = s.charAt(i) - '0';
            if (act.child[si] == null) {
                act.child[si] = new Trie();
            }
            act = act.child[si];
        }
        act.end = true;
    }

    int count(String s, int from) {
        int res = 0;
        Trie act = this;
        for (int i = from; i < s.length(); i++) {
            int si = s.charAt(i) - '0';
            if (act.child[si] == null) return res;
            act = act.child[si];
            if (act.end) res++;
        }
        return res;
    }
}

public class Solution {
    BufferedReader in;
    Trie root;

    Solution() {
        in = new BufferedReader(new InputStreamReader(System.in));
        root = new Trie();
        
        BigInteger pot = BigInteger.ONE;
        for (int i = 0; i <= 800; i++) {
            root.insert(pot.toString());
            pot = pot.multiply(BigInteger.valueOf(2));
        }
    }

    void run() throws IOException {
        int T = Integer.parseInt(in.readLine());
        while (T-- > 0) {
            String s = in.readLine();
            long res = 0;
            for (int i = 0; i < s.length(); i++) {
                res += root.count(s, i);
            }
            System.out.println(res);
        }
    }

    public static void main(String[] args) throws IOException {
        new Solution().run();
    }
}

SELF DRIVING BUS:
#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
typedef pair<int, int> pii;
double PI = acos(-1);
double EPS = 1e-7;
int INF = 1000000000;
LL INFLL = 1000000000000000000LL;

#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define input(in) freopen(in, "r", stdin)
#define output(out) freopen(out, "w", stdout)
#define MIN(a, b) (a) = min((a), (b))
#define MAX(a, b) (a) = max((a), (b))
#define RESET(a, b) memset(a, b, sizeof(a))
#define ALL(a) (a).begin(), (a).end()
#define SIZE(a) (int)a.size()
#define SORT(a) sort(ALL(a))
#define UNIQUE(a) (a).erase(unique(ALL(a)), (a).end())
#define FOR(a, b, c) for (int (a) = (b); (a) <= (c); (a)++)
#define FORD(a, b, c) for (int (a) = (b); (a) >= (c); (a)--)
#define FORIT(a, b) for (__typeof((b).begin()) a = (b).begin(); a != (b).end(); a++)

int mx[8] = {-1, 1, 0, 0, -1, -1, 1, 1};
int my[8] = {0, 0, -1, 1, -1, 1, -1, 1};

int mins[20][200005];
int maks[20][200005];
int premx[20][200005];
int premn[20][200005];
vector<int> adj[200005];

LL go(int lvl, int l, int r) {
    if (l > r) return 0;
    int m = (l + r) / 2;
    queue<pair<int, int>> q;
    q.push(mp(m, -1));
    mins[lvl][m] = m;
    maks[lvl][m] = m;
    
    while (!q.empty()) {
        int u = q.front().fi;
        int p = q.front().se;
        q.pop();
        
        for (int v : adj[u]) {
            if (v == p || v > r || v < l) continue;
            maks[lvl][v] = max(maks[lvl][u], v);
            mins[lvl][v] = min(mins[lvl][u], v);
            q.push(mp(v, u));
        }
    }
    
    LL res = 0;
    vector<int> pos;
    
    FOR(b, m + 1, r) {
        maks[lvl][b] = max(maks[lvl][b - 1], maks[lvl][b]);
        mins[lvl][b] = min(mins[lvl][b - 1], mins[lvl][b]);
        if (maks[lvl][b] == b) pos.pb(b);
    }
    
    FORD(b, m - 1, l) {
        maks[lvl][b] = max(maks[lvl][b + 1], maks[lvl][b]);
        mins[lvl][b] = min(mins[lvl][b + 1], mins[lvl][b]);
    }
    
    FORD(a, m, l) {
        if (mins[lvl][a] < a || mins[lvl][a] < 0 || maks[lvl][a] == INF) continue;
        int cur = maks[lvl][a];
        
        if (max(maks[lvl][a], maks[lvl][cur]) == cur && min(mins[lvl][a], mins[lvl][cur]) == a) {
            res++;
        }
        
        int meh = upper_bound(pos.begin(), pos.end(), cur) - pos.begin();
        
        if (mins[lvl][a] == a) {
            int l = meh, r = SIZE(pos) - 1, yo = meh - 1;
            while (l <= r) {
                int m = (l + r) / 2;
                int cur = pos[m];
                if (mins[lvl][cur] >= a) {
                    yo = m;
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
            res += (yo - meh + 1);
        } else {
            FOR(b, meh, SIZE(pos) - 1) {
                int cur = pos[b];
                if (min(mins[lvl][a], mins[lvl][cur]) == a) res++;
            }
        }
    }
    
    return res + go(lvl + 1, l, m - 1) + go(lvl + 1, m + 1, r);
}

int main() {
    int n;
    scanf("%d", &n);
    
    FOR(a, 0, 19) {
        FOR(b, 0, n - 1) {
            mins[a][b] = -INF;
            maks[a][b] = INF;
        }
    }
    
    FOR(a, 1, n - 1) {
        int u, v;
        scanf("%d%d", &u, &v);
        u--;
        v--;
        adj[u].pb(v);
        adj[v].pb(u);
    }
    
    cout << go(0, 0, n - 1) << endl;
    return 0;
}
