## Dijkstraâ€™s Algorithm::
#include <iostream>
#include <limits.h>

using namespace std;

#define mv 100

int findMinDistance(int dist[], bool p[], int n) {
    int min = INT_MAX, minIndex;

    for (int i = 0; i < n; i++)
        if (!p[i] && dist[i] <= min) {
            min = dist[i];
            minIndex = i;
        }

    return minIndex;
}

void printDistances(int dist[], int n) {
    cout << "Vertex \t Distance from Source" << endl;
    for (int i = 0; i < n; i++)
        cout << i << " \t\t\t" << dist[i] << endl;
}

void dijkstra(int graph[mv][mv], int source, int n) {
    int dist[mv];        
    bool p[mv];          // Array to check if a vertex has been processed

    for (int i = 0; i < n; i++) {
        dist[i] = INT_MAX;  // Initialize all distances as infinite
        p[i] = false;       // Mark all vertices as unprocessed
    }

    dist[source] = 0;  // Distance from the source to itself is 0

    for (int count = 0; count < n - 1; count++) {
        int u = findMinDistance(dist, p, n); 
        p[u] = true;  // Mark the vertex as processed

        for (int v = 0; v < n; v++)
            if (!p[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];  
    }

    printDistances(dist, n);  
}

int main() {
    int n;
    cout << "Enter the number of vertices in the graph: ";
    cin >> n;

    int graph[mv][mv];
    cout << "Enter the adjacency matrix (enter 0 if there is no direct edge):\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> graph[i][j];

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    dijkstra(graph, source, n);

    return 0;
}
