## N-QUEENS PROBLEM:
#include <bits/stdc++.h> 
using namespace std; 
#define N 4 
 
int ld[30] = { 0 };  
int rd[30] = { 0 };  
int cl[30] = { 0 };  
void sol(int board[N][N]) 
{ 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++) 
            cout << " " << (board[i][j]==1?'Q':'.') << " "; 
        cout << endl; 
    } 
    cout << endl; 
} 
bool solveNQ(int board[N][N], int col) 
{ 
    if (col >= N) 
        return true; 
    for (int i = 0; i < N; i++) { 
        if (ld[i - col + N - 1] == 0 && rd[i + col] == 0 && cl[i] == 0) { 
             
            board[i][col] = 1; 
            ld[i - col + N - 1] = rd[i + col] = cl[i] = 1; 
 
            if (solveNQ(board, col + 1)) 
                return true; 
 
            board[i][col] = 0; 
            ld[i - col + N - 1] = rd[i + col] = cl[i] = 0; 
        } 
    } 
    return false; 
} 
bool NQ() 
{ 
    int board[N][N] = { { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 } }; 
 
    if (solveNQ(board, 0) == false) { 
        cout << "solution does not exist" << endl; 
        return false; 
    } 
 
    sol(board); 
    return true; 
} 
int main() 
{ 
    NQ(); 
    return 0; 
}
