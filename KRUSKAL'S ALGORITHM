## Kruskal's Algorithm

#include <iostream>    
#include <algorithm>    
using namespace std;    
const int MAX = 100;    
int d[MAX], nodes, edges;    
pair <long long, pair<int, int> > p[MAX];    
void init()    
{    
    for(int i = 0;i < MAX;++i)    
        d[i] = i;    
}      
int root(int x)    
{    
    while(d[x] != x)    
    {    
        d[x] = d[d[x]];    
        x = d[x];    
    }    
    return x;    
}      
void union1(int x, int y)    
{    
    int p = root(x);    
    int q = root(y);    
    d[p] = d[q];    
}     
long long kruskal(pair<long long, pair<int, int> > p[])    
{    
    int x, y;    
    long long cost, mincost = 0;    
    for(int i = 0;i < edges;++i)    
    {    
        x = p[i].second.first;    
        y = p[i].second.second;    
        cost = p[i].first;    
        if(root(x) != root(y))    
        {    
            mincost += cost;    
            union1(x, y);    
        }        
    }    
    return mincost;    
}     
int main()    
{    
    int x, y;    
    long long weight, cost, mincost;    
    init();    
    cout <<"Enter Nodes and edges";    
    cin >> nodes >> edges;    
    for(int i = 0;i < edges;++i)    
    {    
        cout<<"Enter the value of X, Y and edges";    
    cin >> x >> y >> weight;    
        p[i] = make_pair(weight, make_pair(x, y));    
    }    
    sort(p, p + edges);    
    mincost = kruskal(p);    
    cout <<"Minimum cost is "<< mincost << endl;    
    return 0;    
}     
