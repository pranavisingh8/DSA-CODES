## OPTIMAL MERGE PATTERN
(SELECTION SORT): O(n^2)
#include <iostream> 
using namespace std; 
 
int optmcost(int files[], int n) { 
    int totcost = 0; 
 
    for (int i = 0; i < n - 1; i++) { 
        for (int j = i + 1; j < n; j++) { 
            if (files[i] > files[j]) { 
                int temp = files[i]; 
                files[i] = files[j]; 
                files[j] = temp; 
            } 
        } 
    } 
 
    while (n > 1) { 
 
        int mcost = files[0] + files[1]; 
        totcost += mcost; 
 
        for (int i = 2; i < n; i++) { 
            files[i - 1] = files[i]; 
        } 
 
        files[0] = mcost; 
        n--; 
 
        for (int i = 0; i < n - 1; i++) { 
            for (int j = i + 1; j < n; j++) { 
                if (files[i] > files[j]) { 
                    int temp = files[i]; 
                    files[i] = files[j]; 
                    files[j] = temp; 
                } 
            } 
        } 
    } 
 
    return totcost; 
} 
 
int main() { 
    int n; 
 
    cout << "Enter the number of files: "; 
    cin >> n; 
  
    int files[n]; 
 
    cout << "Enter the sizes of the files:\n"; 
    for (int i = 0; i < n; i++) { 
        cout << "File " << i + 1 << " size: "; 
        cin >> files[i]; 
    } 
 
    cout << "\nfile sizes given are:\n"; 
    for (int i = 0; i < n; i++) { 
        cout << "file " << i + 1 << ": " << files[i] << " units\n"; 
    } 
    int result = optmcost(files, n); 
 
    cout << "\nminimum cost to merge all files: " << result << " units\n"; 
 
    return 0; 
}

(MIN-HEAP): O(nlogn)
#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int optmcost(int files[], int n) {
    priority_queue<int, vector<int>, greater<int>> minHeap;

    for (int i = 0; i < n; i++) {
        minHeap.push(files[i]);
    }

    int totcost = 0;

    while (minHeap.size() > 1) {
        int first = minHeap.top();
        minHeap.pop();
        int second = minHeap.top();
        minHeap.pop();

        int mcost = first + second;
        totcost += mcost;

        minHeap.push(mcost);
    }

    return totcost;
}

int main() {
    int n;

    cout << "Enter the number of files: ";
    cin >> n;

    int files[n];

    cout << "Enter the sizes of the files:\n";
    for (int i = 0; i < n; i++) {
        cout << "File " << i + 1 << " size: ";
        cin >> files[i];
    }

    cout << "\nFile sizes given are:\n";
    for (int i = 0; i < n; i++) {
        cout << "File " << i + 1 << ": " << files[i] << " units\n";
    }

    int result = optmcost(files, n);

    cout << "\nMinimum cost to merge all files: " << result << " units\n";

    return 0;
}

