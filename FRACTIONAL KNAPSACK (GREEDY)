## FRACTIONAL KNAPSACK (GREEDY)
#include <iostream> 
#include <algorithm> 
 
using namespace std; 
 
struct Item { 
    int weight; 
    int value; 
    float ratio; 
}; 
 
bool compare(Item a, Item b) { 
    return a.ratio > b.ratio; 
} 
 
float fractionalKnapsack(Item items[], int n, int capacity) { 
     
    sort(items, items + n, compare); 
 
    float totalValue = 0.0; 
    int remainingCapacity = capacity; 
 
    for (int i = 0; i < n; i++) { 
        if (remainingCapacity == 0) 
            break; 
 
        if (items[i].weight <= remainingCapacity) { 
            totalValue += items[i].value; 
            remainingCapacity -= items[i].weight; 
        } else { 
            totalValue += items[i].value * ((float)remainingCapacity / items[i].weight); 
            remainingCapacity = 0; 
        } 
    } 
 
    return totalValue; 
} 
 
int main() { 
    int n = 4; 
    Item items[] = {{50, 60, 0}, {20, 100, 0}, {30, 120, 0}, {10, 50, 0}}; 
    int capacity = 50; 
 
       for (int i = 0; i < n; i++) { 
        items[i].ratio = (float)items[i].value / items[i].weight; 
    } 
 
    float maxValue = fractionalKnapsack(items, n, capacity); 
    cout << "Maximum value in Fractional Knapsack = " << maxValue << endl; 
 
    return 0; 
}
