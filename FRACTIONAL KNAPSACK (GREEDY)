## FRACTIONAL KNAPSACK (GREEDY)
#include <bits/stdc++.h>
using namespace std;

struct Item {
    int profit, weight;

    Item(int profit, int weight) {
        this->profit = profit;
        this->weight = weight;
    }
};

static bool cmp(struct Item a, struct Item b) {
    double r1 = (double)a.profit / (double)a.weight;
    double r2 = (double)b.profit / (double)b.weight;
    return r1 > r2;
}

double fractionalKnapsack(int W, struct Item arr[], int N) {
    sort(arr, arr + N, cmp);

    double finalvalue = 0.0;

    for (int i = 0; i < N; i++) {
        if (arr[i].weight <= W) {
            W -= arr[i].weight;
            finalvalue += arr[i].profit;
        } else {
            finalvalue += arr[i].profit * ((double)W / (double)arr[i].weight);
            break;
        }
    }

    return finalvalue;
}

int main() {
    int W = 10;
    Item arr[] = { { 3, 2 }, { 7, 2 }, { 2, 4 }, { 9, 5 } };
    int N = 4;

    cout << fractionalKnapsack(W, arr, N);
    return 0;
}
